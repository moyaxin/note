export const pagesRoutes = [
  ["v-8daa1a0e","/",{"title":"博客主页","icon":"home","type":"home","readingTime":{"minutes":0.35,"words":104},"excerpt":""},["/index.html","/README.md"]],
  ["v-79fdd481","/home.html",{"title":"项目主页","icon":"home","type":"home","readingTime":{"minutes":2.61,"words":782},"excerpt":"这是项目主页的案例。你可以在这里放置你的主体内容。 想要使用此布局，你需要在页面 front matter 中设置 home: true。 配置项的相关说明详见 项目主页配置。"},["/home","/home.md"]],
  ["v-257d5954","/java/1.%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html",{"title":"1.基本语法","type":"article","readingTime":{"minutes":17.54,"words":5263},"excerpt":"<p>java 基本语法</p>\n","date":"2022-07-29T00:00:00.000Z","localizedDate":"2022年7月29日","category":["java基础"],"tag":["知识点"],"sticky":true},["/java/1.基本语法.html","/java/1.%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95","/java/1.基本语法.md","/java/1.%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.md"]],
  ["v-60333e1a","/java/10.%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B.html",{"title":"10.网络编程","type":"article","readingTime":{"minutes":6.52,"words":1957},"excerpt":"<p>网络编程</p>\n","date":"2022-07-29T00:00:00.000Z","localizedDate":"2022年7月29日","category":["java基础"],"tag":["知识点"],"sticky":true},["/java/10.网络编程.html","/java/10.%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B","/java/10.网络编程.md","/java/10.%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B.md"]],
  ["v-5f814a62","/java/11.%E5%8F%8D%E5%B0%84.html",{"title":"11.反射","type":"article","readingTime":{"minutes":10.45,"words":3136},"excerpt":"<p>反射</p>\n","date":"2022-07-29T00:00:00.000Z","localizedDate":"2022年7月29日","category":["java基础"],"tag":["知识点"],"sticky":true},["/java/11.反射.html","/java/11.%E5%8F%8D%E5%B0%84","/java/11.反射.md","/java/11.%E5%8F%8D%E5%B0%84.md"]],
  ["v-706cca6a","/java/12.jdk8%E6%96%B0%E7%89%B9%E6%80%A7.html",{"title":"12.jdk8新特性","type":"article","readingTime":{"minutes":22.41,"words":6723},"excerpt":"<p>jdk8新特性</p>\n","date":"2022-07-29T00:00:00.000Z","localizedDate":"2022年7月29日","category":["java基础"],"tag":["知识点"],"sticky":true},["/java/12.jdk8新特性.html","/java/12.jdk8%E6%96%B0%E7%89%B9%E6%80%A7","/java/12.jdk8新特性.md","/java/12.jdk8%E6%96%B0%E7%89%B9%E6%80%A7.md"]],
  ["v-86f14d40","/java/2.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1.html",{"title":"2.面向对象","type":"article","readingTime":{"minutes":30.99,"words":9298},"excerpt":"<p>面向对象</p>\n","date":"2022-07-29T00:00:00.000Z","localizedDate":"2022年7月29日","category":["java基础"],"tag":["知识点"],"sticky":true},["/java/2.面向对象.html","/java/2.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1","/java/2.面向对象.md","/java/2.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1.md"]],
  ["v-12d5d43a","/java/3.%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.html",{"title":"3.异常处理","type":"article","readingTime":{"minutes":3.79,"words":1138},"excerpt":"<p>异常处理</p>\n","date":"2022-07-29T00:00:00.000Z","localizedDate":"2022年7月29日","category":["java基础"],"tag":["知识点"],"sticky":true},["/java/3.异常处理.html","/java/3.%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86","/java/3.异常处理.md","/java/3.%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.md"]],
  ["v-5ed030e2","/java/4.%E5%A4%9A%E7%BA%BF%E7%A8%8B.html",{"title":"4.多线程","type":"article","readingTime":{"minutes":15.26,"words":4578},"excerpt":"<p>多线程</p>\n","date":"2022-07-29T00:00:00.000Z","localizedDate":"2022年7月29日","category":["java基础"],"tag":["知识点"],"sticky":true},["/java/4.多线程.html","/java/4.%E5%A4%9A%E7%BA%BF%E7%A8%8B","/java/4.多线程.md","/java/4.%E5%A4%9A%E7%BA%BF%E7%A8%8B.md"]],
  ["v-274f4cde","/java/5.Java%E5%B8%B8%E7%94%A8%E7%B1%BB.html",{"title":"5.java常用类","type":"article","readingTime":{"minutes":12.8,"words":3841},"excerpt":"<p>java常用类</p>\n","date":"2022-07-29T00:00:00.000Z","localizedDate":"2022年7月29日","category":["java基础"],"tag":["知识点"],"sticky":true},["/java/5.Java常用类.html","/java/5.Java%E5%B8%B8%E7%94%A8%E7%B1%BB","/java/5.Java常用类.md","/java/5.Java%E5%B8%B8%E7%94%A8%E7%B1%BB.md"]],
  ["v-2455dee8","/java/6.%E6%9E%9A%E4%B8%BE%E7%B1%BB&%E6%B3%A8%E8%A7%A3.html",{"title":"6.枚举类&注解","type":"article","readingTime":{"minutes":4.14,"words":1243},"excerpt":"<p>枚举类&amp;注解</p>\n","date":"2022-07-29T00:00:00.000Z","localizedDate":"2022年7月29日","category":["java基础"],"tag":["知识点"],"sticky":true},["/java/6.枚举类&注解.html","/java/6.%E6%9E%9A%E4%B8%BE%E7%B1%BB&%E6%B3%A8%E8%A7%A3","/java/6.枚举类&注解.md","/java/6.%E6%9E%9A%E4%B8%BE%E7%B1%BB&%E6%B3%A8%E8%A7%A3.md"]],
  ["v-67adda9c","/java/7.Java%E9%9B%86%E5%90%88.html",{"title":"7.java集合","type":"article","readingTime":{"minutes":16.36,"words":4907},"excerpt":"<p>java集合</p>\n","date":"2022-07-29T00:00:00.000Z","localizedDate":"2022年7月29日","category":["java基础"],"tag":["知识点"],"sticky":true},["/java/7.Java集合.html","/java/7.Java%E9%9B%86%E5%90%88","/java/7.Java集合.md","/java/7.Java%E9%9B%86%E5%90%88.md"]],
  ["v-30ac5c4a","/java/8.%E6%B3%9B%E5%9E%8B.html",{"title":"8.泛型","type":"article","readingTime":{"minutes":5.28,"words":1584},"excerpt":"<p>泛型</p>\n","date":"2022-07-29T00:00:00.000Z","localizedDate":"2022年7月29日","category":["java基础"],"tag":["知识点"],"sticky":true},["/java/8.泛型.html","/java/8.%E6%B3%9B%E5%9E%8B","/java/8.泛型.md","/java/8.%E6%B3%9B%E5%9E%8B.md"]],
  ["v-31077d4c","/java/9.IO%E6%B5%81.html",{"title":"9.IO流","type":"article","readingTime":{"minutes":14.59,"words":4378},"excerpt":"<p>IO流</p>\n","date":"2022-07-29T00:00:00.000Z","localizedDate":"2022年7月29日","category":["java基础"],"tag":["知识点"],"sticky":true},["/java/9.IO流.html","/java/9.IO%E6%B5%81","/java/9.IO流.md","/java/9.IO%E6%B5%81.md"]],
  ["v-7231641a","/devTool/git/Git%E4%BB%8B%E7%BB%8D.html",{"title":"git基本介绍","type":"article","readingTime":{"minutes":9.72,"words":2917},"excerpt":"<p>Git是分布式代码托管的标杆，这里将提供如何学习Git，以及Git工作流的总结，和常用的操作命令</p>\n","date":"2022-07-29T00:00:00.000Z","localizedDate":"2022年7月29日","category":["工具"],"tag":["入门"],"sticky":true},["/devTool/git/Git介绍.html","/devTool/git/Git%E4%BB%8B%E7%BB%8D","/devTool/git/Git介绍.md","/devTool/git/Git%E4%BB%8B%E7%BB%8D.md"]],
  ["v-c09ecb58","/devTool/git/Git%E5%AE%9E%E6%93%8D.html",{"title":"git实操","type":"article","readingTime":{"minutes":6.18,"words":1855},"excerpt":"<p>这里记录了常用git指令和使用git的场景</p>\n","date":"2022-07-29T00:00:00.000Z","localizedDate":"2022年7月29日","category":["工具"],"tag":["命令"]},["/devTool/git/Git实操.html","/devTool/git/Git%E5%AE%9E%E6%93%8D","/devTool/git/Git实操.md","/devTool/git/Git%E5%AE%9E%E6%93%8D.md"]],
  ["v-7d953cc0","/devTool/docker/docker%E4%BB%8B%E7%BB%8D.html",{"title":"Docker","type":"article","readingTime":{"minutes":16.49,"words":4946},"excerpt":"<p>Docker消除了重复的、平凡的配置任务</p>\n<p>并在整个开发生命周期中用于快速、简单和可移植的应用程序开发</p>\n","date":"2020-07-30T00:00:00.000Z","localizedDate":"2020年7月30日","category":["工具"],"tag":["入门"],"sticky":true},["/devTool/docker/docker介绍.html","/devTool/docker/docker%E4%BB%8B%E7%BB%8D","/devTool/docker/docker介绍.md","/devTool/docker/docker%E4%BB%8B%E7%BB%8D.md"]],
  ["v-2e65851e","/devTool/linux/linux%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D.html",{"title":"linux基本介绍","type":"article","readingTime":{"minutes":11.82,"words":3547},"excerpt":"<p>一款免费，开源，安全，高效，稳定，处理高并发很强悍的操作系统</p>\n","date":"2022-07-29T00:00:00.000Z","localizedDate":"2022年7月29日","category":["工具"],"tag":["入门"],"sticky":true},["/devTool/linux/linux基础介绍.html","/devTool/linux/linux%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D","/devTool/linux/linux基础介绍.md","/devTool/linux/linux%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D.md"]],
  ["v-9913fa56","/devTool/linux/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html",{"title":"linux常用命令","type":"article","readingTime":{"minutes":3.63,"words":1089},"excerpt":"<p>部分linux指令的摘录</p>\n","date":"2022-07-29T00:00:00.000Z","localizedDate":"2022年7月29日","category":["工具"],"tag":["命令"]},["/devTool/linux/linux常用命令.html","/devTool/linux/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4","/devTool/linux/linux常用命令.md","/devTool/linux/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.md"]],
  ["v-2f71ba40","/devTool/linux/linux%E7%94%A8%E6%88%B7%E3%80%81%E6%9D%83%E9%99%90%E3%80%81%E8%BF%9B%E7%A8%8B.html",{"title":"1.linux功能管理","type":"article","readingTime":{"minutes":17.45,"words":5234},"excerpt":"<p>讲解一下linux的用户管理、权限管理还有进程相关知识</p>\n","date":"2022-07-29T00:00:00.000Z","localizedDate":"2022年7月29日","category":["工具"],"tag":["知识点"]},["/devTool/linux/linux用户、权限、进程.html","/devTool/linux/linux%E7%94%A8%E6%88%B7%E3%80%81%E6%9D%83%E9%99%90%E3%80%81%E8%BF%9B%E7%A8%8B","/devTool/linux/linux用户、权限、进程.md","/devTool/linux/linux%E7%94%A8%E6%88%B7%E3%80%81%E6%9D%83%E9%99%90%E3%80%81%E8%BF%9B%E7%A8%8B.md"]],
  ["v-7f43d6b4","/computerBasic/design/build/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F.html",{"title":"创建型模式","type":"article","readingTime":{"minutes":0.39,"words":116},"excerpt":"<p>这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活</p>\n","date":"2022-08-01T00:00:00.000Z","localizedDate":"2022年8月1日","category":["设计模式"],"tag":["知识点"],"sticky":true},["/computerBasic/design/build/创建型模式.html","/computerBasic/design/build/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F","/computerBasic/design/build/创建型模式.md","/computerBasic/design/build/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F.md"]],
  ["v-6e913126","/computerBasic/design/build/%E5%8D%95%E4%BE%8B.html",{"title":"","type":"article","readingTime":{"minutes":2.53,"words":758},"excerpt":"1.单例模式 1.饿汉式（静态常量）:star: 优点：这种写法比较简单，就是在类装载的时候就完成实例化，避免了线程同步的问题; 缺点：在类装载的时候就完成实例化，没有达到Lazy Loading的效果，如果从始至终从未使用过这个实例，则会造成内存浪费; 这种单例模式可用，但可能造成内存浪费 2.饿汉式（静态代码块） 同上一个 3.懒汉式 线程不安全 起到了"},["/computerBasic/design/build/单例.html","/computerBasic/design/build/%E5%8D%95%E4%BE%8B","/computerBasic/design/build/单例.md","/computerBasic/design/build/%E5%8D%95%E4%BE%8B.md"]],
  ["v-c85c6644","/computerBasic/design/build/%E5%8E%9F%E5%9E%8B.html",{"title":"","type":"article","readingTime":{"minutes":3.1,"words":929},"excerpt":"3.原型模式 1.介绍 \" 原型模式(Prototype模式) ，用原型实例指定创建对象的种类，并且通过拷贝这些原型，创建新的对象\" \" 原型模式是一种创建型设计模式，允许一个对象再创建另外一个可定制的对象，无需知道如何创建的细节\" \" 工作原理是:通过将-一个原型对象传给那个要发动创建的对象,这个要发动创建的对象通过请求原型对象拷贝它们自己来实施创建，即对"},["/computerBasic/design/build/原型.html","/computerBasic/design/build/%E5%8E%9F%E5%9E%8B","/computerBasic/design/build/原型.md","/computerBasic/design/build/%E5%8E%9F%E5%9E%8B.md"]],
  ["v-2c35b364","/computerBasic/design/build/%E5%B7%A5%E5%8E%82.html",{"title":"","type":"article","readingTime":{"minutes":3.53,"words":1058},"excerpt":"2.工厂模式 1.工厂模式的意义 将实例化对象的代码提取出来，放到一个类中统一管理和维护，达到和主项目的依赖关系的解耦。从而提高项 目的扩展和维护性。 2.三种工厂 模式(简单工厂模式、工厂方法模式、抽象工厂模式) 3.设计模式的依赖抽象原则 创建对 象实例时，不要直接new类,而是把这个new类的动作放在一个工厂的方法中，并返回。有的书上说，; 变量不要直"},["/computerBasic/design/build/工厂.html","/computerBasic/design/build/%E5%B7%A5%E5%8E%82","/computerBasic/design/build/工厂.md","/computerBasic/design/build/%E5%B7%A5%E5%8E%82.md"]],
  ["v-41dc9500","/computerBasic/design/build/%E5%BB%BA%E9%80%A0.html",{"title":"","type":"article","readingTime":{"minutes":3.66,"words":1097},"excerpt":"4.建造者模式 1.介绍 \" 建造者模式(BuilderPattern)又叫生成器模式，是一种对象构建模式。它可以将复杂对象的建造过程抽象出\" \" 来(抽象类别)，使这个抽象过程的不同实现方法可以构造出不同表现(属性)的对象。\" \" 建造者模式是一步一步创建一一个复杂的对象，它允许用户只通过指定复杂对象的类型和内容就可以构建它们，用户不需要知道内部的具体构建"},["/computerBasic/design/build/建造.html","/computerBasic/design/build/%E5%BB%BA%E9%80%A0","/computerBasic/design/build/建造.md","/computerBasic/design/build/%E5%BB%BA%E9%80%A0.md"]],
  ["v-3e4cf2fa","/computerBasic/design/construction/%E4%BA%AB%E5%85%83.html",{"title":"","type":"article","readingTime":{"minutes":4.58,"words":1375},"excerpt":"6.享元模式 1.基本介绍 \"1)享元模式( Flyweight Pattern)也叫蝇量模式:运用共享技术有效地支持大量细粒度的对象\" \"2)常用于系统底层开发，解决系统的性能问题。像数据库连接池，里面都是创建好的连接对象，在这些连接对象中有我们需要的则直接拿来用，避免重新创建，如果没有我们需要的，则创建一个\" \"3)享元模式能够解决重复对象的内存浪费的问"},["/computerBasic/design/construction/享元.html","/computerBasic/design/construction/%E4%BA%AB%E5%85%83","/computerBasic/design/construction/享元.md","/computerBasic/design/construction/%E4%BA%AB%E5%85%83.md"]],
  ["v-3b0e9402","/computerBasic/design/construction/%E4%BB%A3%E7%90%86.html",{"title":"","type":"article","readingTime":{"minutes":6.56,"words":1968},"excerpt":"7.代理模式 1. 基本介绍 \" 1)代理模式:为一一个对象提供-一个替身，以控制对这个对象的访问。即通过代理对象访问目标对象.这样做的好处是:可以在目标对象实现的基础上，增强额外的功能操作即扩展目标对象的功能。\" \" 2)被代理的对象可以是远程对象、创建开销大的对象或需要安全控制的对象\" \" 3)代理模式有不同的形式，主要有三种静态代理、动态代理(JDK "},["/computerBasic/design/construction/代理.html","/computerBasic/design/construction/%E4%BB%A3%E7%90%86","/computerBasic/design/construction/代理.md","/computerBasic/design/construction/%E4%BB%A3%E7%90%86.md"]],
  ["v-137910ba","/computerBasic/design/construction/%E5%A4%96%E8%A7%82.html",{"title":"","type":"article","readingTime":{"minutes":3.33,"words":999},"excerpt":"5.外观模式 1.基本介绍 \" 外观模式(Facade) ，也叫“过程模式:外观模式为子系统中的一组接口提供了一个一 致的界面，此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用\" \" 外观模式通过定义一个一致的接口，用以屏蔽内部子系统的细节，使得调用端只需跟这个接口发生调用，而无需关心这个子系统的内部细节\" 原理图： 对类图说明(分类外观模式的角"},["/computerBasic/design/construction/外观.html","/computerBasic/design/construction/%E5%A4%96%E8%A7%82","/computerBasic/design/construction/外观.md","/computerBasic/design/construction/%E5%A4%96%E8%A7%82.md"]],
  ["v-47e75e18","/computerBasic/design/construction/%E6%A1%A5%E6%8E%A5.html",{"title":"","type":"article","readingTime":{"minutes":3.12,"words":937},"excerpt":"2.桥接模式 1.基本介绍 \" 桥接模式(Bridge模式)是指:将实现与抽象放在两个不同的类层次中，使两个层次可以独立改变。是一种结构型设计模式\" \" Bridge模式基于类的最小设计原则，通过使用封装、聚合及继承等行为让不同的类承担不同的职责。它的主要\" \" 特点是把抽象(Abstraction)与行为实现(Implementation)分离开来,从而可"},["/computerBasic/design/construction/桥接.html","/computerBasic/design/construction/%E6%A1%A5%E6%8E%A5","/computerBasic/design/construction/桥接.md","/computerBasic/design/construction/%E6%A1%A5%E6%8E%A5.md"]],
  ["v-68049a6c","/computerBasic/design/construction/%E7%BB%84%E5%90%88.html",{"title":"","type":"article","readingTime":{"minutes":4.04,"words":1212},"excerpt":"4.组合模式 1. 基本介绍 \" 组合模式(Composite Pattern)，又叫部分整体模式，它创建了对象组的树形结构，将对象组合成树状结构以表示\"整体-部分”的层次关系。\" \" 组合模式依据树形结构来组合对象，用来表示部分以及整体层次。这种类型的设计模式属于结构型模式。\" \" 组合模式使得用户对单个对象和组合对象的访问具有一致性，即:组合能让客户以一"},["/computerBasic/design/construction/组合.html","/computerBasic/design/construction/%E7%BB%84%E5%90%88","/computerBasic/design/construction/组合.md","/computerBasic/design/construction/%E7%BB%84%E5%90%88.md"]],
  ["v-5ab9bf2c","/computerBasic/design/construction/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F.html",{"title":"结构型模式","type":"article","readingTime":{"minutes":0.35,"words":106},"excerpt":"<p>将类或者对 象结合在一起形成更大的结构，就像搭积木，可以通过 简单积木的组合形成复杂的、功能更为强大的结构</p>\n","date":"2022-08-02T00:00:00.000Z","localizedDate":"2022年8月2日","category":["设计模式"],"tag":["知识点"],"sticky":true},["/computerBasic/design/construction/结构型模式.html","/computerBasic/design/construction/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F","/computerBasic/design/construction/结构型模式.md","/computerBasic/design/construction/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F.md"]],
  ["v-26022da7","/computerBasic/design/construction/%E8%A3%85%E9%A5%B0.html",{"title":"","type":"article","readingTime":{"minutes":1.83,"words":548},"excerpt":"3.装饰者模式 1.介绍 \" 装饰者模式:动态的将新功能附加到对象上。在对象功能扩展方面，它比继承更有弹性，装饰者模式也体现了开闭原则(ocp)\" 2.案例： 咖啡种类/单品咖啡: Espresso( 意大利浓咖啡)、ShortBlack(单品咖啡)、 LongBlack(美式咖啡)、 调料: Milk、 Soy(豆浆)、 Chocolate 要求在扩展新的"},["/computerBasic/design/construction/装饰.html","/computerBasic/design/construction/%E8%A3%85%E9%A5%B0","/computerBasic/design/construction/装饰.md","/computerBasic/design/construction/%E8%A3%85%E9%A5%B0.md"]],
  ["v-7ffd61bc","/computerBasic/design/construction/%E9%80%82%E9%85%8D%E5%99%A8.html",{"title":"","type":"article","readingTime":{"minutes":4.52,"words":1355},"excerpt":"1.适配器模式 1.介绍 \" 适配器模式(Adapter Pattern)将某个类的接口转换成客户端期望的另一个接口表示，主的目的是兼容性，让原本.\" \" 因接口不匹配不能- -起工作的两个类可以协同工作。其别名为包装器(Wrapper)\" \" 适配器模式属于结构型模式主要分为三类:类适配器模式、对象适配器模式、接口适配器模式\" 适配器模式:将一个类的接口转"},["/computerBasic/design/construction/适配器.html","/computerBasic/design/construction/%E9%80%82%E9%85%8D%E5%99%A8","/computerBasic/design/construction/适配器.md","/computerBasic/design/construction/%E9%80%82%E9%85%8D%E5%99%A8.md"]],
  ["v-7c801280","/computerBasic/design/introduce/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99.html",{"title":"设计原则","type":"article","readingTime":{"minutes":8.81,"words":2643},"excerpt":"设计原则 1.单一职责原则 \" 降低类的复杂度, 一个类只负责一项职责\" \"\" \" 提高类的可读性，可维护性。\" \"\" \" 降低变更引起的风险，对于服务端的代码尽量做到只新增不修改。\" 以交通案例讲解： 2.接口隔离原则 \" 客户端不应该依赖于它不使用的方法和接口；一个类对另一个类的依赖应该建立在最小的接口上。\" 3.依赖倒转原则 \" 高层模块不应该依赖低层"},["/computerBasic/design/introduce/设计原则.html","/computerBasic/design/introduce/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99","/computerBasic/design/introduce/设计原则.md","/computerBasic/design/introduce/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99.md"]],
  ["v-38081070","/computerBasic/design/introduce/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%BB%8B%E7%BB%8D.html",{"title":"设计模式","type":"article","readingTime":{"minutes":0.97,"words":290},"excerpt":"<p>在软件开发中，前人对软件系统的设计和开发总结了一些原则和模式， 不管用什么语言做开发，都将对我们系统设计和开发提供指导意义。本文主要将对24种设计模式和7个设计原则进行总结和具体阐述意义</p>\n","date":"2022-07-30T00:00:00.000Z","localizedDate":"2022年7月30日","category":["设计模式"],"tag":["入门"],"sticky":true},["/computerBasic/design/introduce/设计模式介绍.html","/computerBasic/design/introduce/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%BB%8B%E7%BB%8D","/computerBasic/design/introduce/设计模式介绍.md","/computerBasic/design/introduce/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%BB%8B%E7%BB%8D.md"]],
  ["v-3706649a","/404.html",{"title":"","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/404"]],
  ["v-5bc93818","/category/",{"title":"分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/index.html"]],
  ["v-744d024e","/tag/",{"title":"标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/index.html"]],
  ["v-e52c881c","/article/",{"title":"文章","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/article/index.html"]],
  ["v-75ed4ea4","/encrypted/",{"title":"加密","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/encrypted/index.html"]],
  ["v-d804e652","/slide/",{"title":"幻灯片","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/slide/index.html"]],
  ["v-154dc4c4","/star/",{"title":"收藏","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/star/index.html"]],
  ["v-be114ee2","/time-is-precious/",{"title":"时间轴","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/time-is-precious/index.html"]],
  ["v-646b395d","/category/java%E5%9F%BA%E7%A1%80/",{"title":"java基础 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/java基础/","/category/java%E5%9F%BA%E7%A1%80/index.html"]],
  ["v-4a2afdc8","/tag/%E7%9F%A5%E8%AF%86%E7%82%B9/",{"title":"知识点 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/知识点/","/tag/%E7%9F%A5%E8%AF%86%E7%82%B9/index.html"]],
  ["v-14145d44","/category/%E5%B7%A5%E5%85%B7/",{"title":"工具 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/工具/","/category/%E5%B7%A5%E5%85%B7/index.html"]],
  ["v-7ae4fd1b","/tag/%E5%85%A5%E9%97%A8/",{"title":"入门 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/入门/","/tag/%E5%85%A5%E9%97%A8/index.html"]],
  ["v-41590e77","/category/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/",{"title":"设计模式 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/设计模式/","/category/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/index.html"]],
  ["v-16f21ed9","/tag/%E5%91%BD%E4%BB%A4/",{"title":"命令 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/命令/","/tag/%E5%91%BD%E4%BB%A4/index.html"]],
]
